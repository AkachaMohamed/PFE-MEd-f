{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mohamed\\\\Desktop\\\\PROJET_PFE\\\\PFE\\\\app\\\\screens\\\\RegisterScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Yup from \"yup\";\n\nvar yup = require('yup');\n\nvar setLocale = yup.setLocale;\nsetLocale({\n  mixed: {\n    notType: 'the ${path} is obligatory',\n    required: 'the field ${path} is obligatory',\n    oneOf: 'the field ${path} must have one of the following values: ${values}'\n  }\n});\nimport Screen from \"../components/Screen\";\nimport usersApi from \"../api/users\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nimport { ErrorMessage, Form, FormField, SubmitButton } from \"../components/forms\";\nimport useApi from \"../hooks/useApi\";\nimport ActivityIndicator from \"../components/ActivityIndicator\";\nvar validationSchema = Yup.object().shape({\n  name: Yup.string().required().label(\"Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(6).label(\"Password\"),\n  phoneConjoint: Yup.string().when('isSelected', {\n    is: true,\n    then: Yup.string().required('Comments are required when denying an approval.')\n  })\n});\n\nfunction _renderCancel(isSelected) {\n  if (isSelected == true) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, React.createElement(FormField, {\n      autoCorrect: false,\n      icon: \"account\",\n      name: \"name2\",\n      placeholder: \"Pr\\xE9nom conjoint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), React.createElement(FormField, {\n      autoCorrect: false,\n      icon: \"account\",\n      name: \"surname2\",\n      placeholder: \"Nom Conjoint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), React.createElement(FormField, {\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      icon: \"phone\",\n      name: \"phoneConjoint\",\n      placeholder: \"T\\xE9l. Conjoint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return null;\n  }\n}\n\nfunction RegisterScreen() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSelected = _useState2[0],\n      setSelection = _useState2[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setSelection(function (isSelected) {\n      return !isSelected;\n    });\n  };\n\n  var registerApi = useApi(usersApi.register);\n  var loginApi = useApi(authApi.login);\n  var auth = useAuth();\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  if (isSelected) {\n    validationSchema.conj = Yup.object().shape({\n      phoneConjoint: Yup.string().required().label(\"phone conjoint\")\n    });\n  }\n\n  var handleSubmit = function handleSubmit(userInfo) {\n    var result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(registerApi.request(userInfo));\n\n          case 2:\n            result = _context.sent;\n            console.log(result + \"------------------------------\");\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(ActivityIndicator, {\n    visible: registerApi.loading || loginApi.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), React.createElement(Screen, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, React.createElement(Form, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(ErrorMessage, {\n    error: error,\n    visible: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    autoCorrect: false,\n    icon: \"account\",\n    name: \"name\",\n    placeholder: \"Pr\\xE9nom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    autoCorrect: false,\n    icon: \"account\",\n    name: \"surname\",\n    placeholder: \"Nom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"email\",\n    keyboardType: \"email-address\",\n    name: \"email\",\n    placeholder: \"Email\",\n    textContentType: \"emailAddress\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"phone\",\n    name: \"phone\",\n    placeholder: \"T\\xE9l\\xE9phone\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"lock\",\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    textContentType: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.checkboxContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Ajouter des coordonn\\xE9es alternatives\"), React.createElement(Switch, {\n    name: \"conjoint\",\n    value: isSelected,\n    onValueChange: toggleSwitch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), _renderCancel(isSelected), React.createElement(SubmitButton, {\n    title: \"Register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10\n  },\n  checkboxContainer: {\n    backgroundColor: \"#ffffff\",\n    borderRadius: 30,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10,\n    marginBottom: 20\n  },\n  checkbox: {\n    alignSelf: \"center\"\n  },\n  label: {\n    margin: 8\n  }\n});\nexport default RegisterScreen;","map":{"version":3,"sources":["C:/Users/Mohamed/Desktop/PROJET_PFE/PFE/app/screens/RegisterScreen.js"],"names":["React","useState","Yup","yup","require","setLocale","mixed","notType","required","oneOf","Screen","usersApi","authApi","useAuth","ErrorMessage","Form","FormField","SubmitButton","useApi","ActivityIndicator","validationSchema","object","shape","name","string","label","email","password","min","phoneConjoint","when","is","then","_renderCancel","isSelected","RegisterScreen","setSelection","toggleSwitch","registerApi","register","loginApi","login","auth","error","setError","conj","handleSubmit","userInfo","request","result","console","log","loading","styles","container","checkboxContainer","StyleSheet","create","padding","backgroundColor","borderRadius","flexDirection","marginVertical","marginBottom","checkbox","alignSelf","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet,Switch,View,Text,TouchableHighlight, Alert } from \"react-native\";\nimport * as Yup from \"yup\";\nconst yup = require('yup')\nconst {\n  setLocale\n} = yup\n\nsetLocale({\n  mixed: {\n    notType: 'the ${path} is obligatory',\n    required: 'the field ${path} is obligatory',\n    oneOf: 'the field ${path} must have one of the following values: ${values}'\n  }\n})\nimport Screen from \"../components/Screen\";\nimport usersApi from \"../api/users\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nimport {ErrorMessage,Form,FormField,SubmitButton,} from \"../components/forms\";\nimport useApi from \"../hooks/useApi\";\nimport ActivityIndicator from \"../components/ActivityIndicator\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required().label(\"Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(6).label(\"Password\"),\n  phoneConjoint: Yup.string()\n               .when('isSelected', { // Change approvalState to string\n                 is: true,\n                 then: Yup.string().required('Comments are required when denying an approval.'),\n               }),\n  \n});\n\nfunction _renderCancel  (isSelected) {\n  /* Alert.alert(\n    \"Alert Title\",\n    \"My Alert Msg\",\n    [\n      {\n        text: \"Cancel\",\n        onPress: () => console.log(\"Cancel Pressed\"),\n        style: \"cancel\"\n      },\n      { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n    ],\n    { cancelable: false }\n  ); */\n  \n  if (isSelected==true) {\n    return (\n          \n            <View>\n            \n          <FormField\n            autoCorrect={false}\n            icon=\"account\"\n            name=\"name2\"\n            placeholder=\"Prénom conjoint\"            \n          />  \n          <FormField\n            autoCorrect={false}\n            icon=\"account\"\n            name=\"surname2\"\n            placeholder=\"Nom Conjoint\"            \n          /> \n          <FormField\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            icon=\"phone\"\n            name=\"phoneConjoint\"\n            placeholder=\"Tél. Conjoint\"\n          />\n            </View>\n          \n    );\n      \n  } else {\n      return null;\n  }\n}\nfunction RegisterScreen() {\n  const [isSelected, setSelection] = useState(true);\n  const toggleSwitch = () => setSelection(isSelected => !isSelected);\n  \n  const registerApi = useApi(usersApi.register);\n  const loginApi = useApi(authApi.login);\n  const auth = useAuth();\n  const [error, setError] = useState();\n  if (isSelected) {\n    validationSchema.conj=Yup.object().shape({\n      phoneConjoint: Yup.string().required().label(\"phone conjoint\"),\n    })\n  }\n  const handleSubmit = async (userInfo) => {\n  const result = await registerApi.request(userInfo);\n console.log(result+\"------------------------------\")\n  /* if (!result.ok) {\n    if (result.data) setError(result.data.error);\n    else {\n      setError(\"An unexpected error occurred.\");\n    }\n    return;\n  }\n */\n  //const { data: authToken } = await loginApi.request(\n    /* const { token } = await loginApi.request(\n      userInfo\n    );\n    auth.logIn(authToken); */\n  };\n\n  return (\n    <>\n      <ActivityIndicator visible={registerApi.loading || loginApi.loading} />\n      <Screen style={styles.container}>\n        <Form\n          initialValues={{ name: \"\", email: \"\", password: \"\" }}\n          onSubmit={handleSubmit}\n          validationSchema={validationSchema}\n        >\n          <ErrorMessage error={error} visible={error} />\n          <FormField\n            autoCorrect={false}\n            icon=\"account\"\n            name=\"name\"\n            placeholder=\"Prénom\"            \n          />  \n          <FormField\n            autoCorrect={false}\n            icon=\"account\"\n            name=\"surname\"\n            placeholder=\"Nom\"            \n          />        \n          <FormField\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            icon=\"email\"\n            keyboardType=\"email-address\"\n            name=\"email\"\n            placeholder=\"Email\"\n            textContentType=\"emailAddress\"\n          />\n          <FormField\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            icon=\"phone\"\n            name=\"phone\"\n            placeholder=\"Téléphone\"\n          />\n          <FormField\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            icon=\"lock\"\n            name=\"password\"\n            placeholder=\"Password\"\n            secureTextEntry\n            textContentType=\"password\"\n          />\n          <View style={styles.checkboxContainer}>\n            <Text>Ajouter des coordonnées alternatives</Text>\n          <Switch name=\"conjoint\" value={isSelected} onValueChange={toggleSwitch}\n          \n          \n          />\n          </View>         \n        \n      {/* <Text>Is CheckBox selected: {isSelected ? \"👍\" : \"👎\"}</Text> */}\n      {_renderCancel(isSelected)}      \n          \n          <SubmitButton title=\"Register\" />\n        </Form>\n      </Screen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n  checkboxContainer: {\n    backgroundColor: \"#ffffff\",\n    borderRadius: 30,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10,\n    marginBottom: 20,\n  },\n  checkbox: {\n    alignSelf: \"center\",\n  },\n  label: {\n    margin: 8,\n  },\n});\n\nexport default RegisterScreen;\n"]},"metadata":{},"sourceType":"module"}