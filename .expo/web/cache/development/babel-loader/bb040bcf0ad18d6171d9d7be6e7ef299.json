{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohamed\\\\Desktop\\\\PROJET_PFE\\\\PFE\\\\app\\\\components\\\\ContactSellerForm.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Notifications } from \"expo\";\nimport * as Yup from \"yup\";\nimport { Form, FormField, SubmitButton } from \"./forms\";\nimport messagesApi from \"../api/messages\";\n\nfunction ContactSellerForm(_ref) {\n  var listing = _ref.listing;\n\n  var handleSubmit = function handleSubmit(_ref2, _ref3) {\n    var message, resetForm, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = _ref2.message;\n            resetForm = _ref3.resetForm;\n            Keyboard.dismiss();\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(messagesApi.send(message, listing.id));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 9;\n              break;\n            }\n\n            console.log(\"Error\", result);\n            return _context.abrupt(\"return\", Alert.alert(\"Error\", \"Could not send the message to the seller.\"));\n\n          case 9:\n            resetForm();\n            Notifications.presentLocalNotificationAsync({\n              title: \"Awesome!\",\n              body: \"Your message was sent to the seller.\"\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Form, {\n    initialValues: {\n      message: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(FormField, {\n    maxLength: 255,\n    multiline: true,\n    name: \"message\",\n    numberOfLines: 3,\n    placeholder: \"Message...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Contact Seller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar validationSchema = Yup.object().shape({\n  message: Yup.string().required().min(1).label(\"Message\")\n});\nexport default ContactSellerForm;","map":{"version":3,"sources":["C:/Users/Mohamed/Desktop/PROJET_PFE/PFE/app/components/ContactSellerForm.js"],"names":["React","Notifications","Yup","Form","FormField","SubmitButton","messagesApi","ContactSellerForm","listing","handleSubmit","message","resetForm","Keyboard","dismiss","send","id","result","ok","console","log","Alert","alert","presentLocalNotificationAsync","title","body","validationSchema","object","shape","string","required","min","label"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,YAA1B;AACA,OAAOC,WAAP;;AAEA,SAASC,iBAAT,OAAwC;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACtC,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,OAAT,SAASA,OAAT;AAAsBC,YAAAA,SAAtB,SAAsBA,SAAtB;AACnBC,YAAAA,QAAQ,CAACC,OAAT;AADmB;AAAA,6CAGEP,WAAW,CAACQ,IAAZ,CAAiBJ,OAAjB,EAA0BF,OAAO,CAACO,EAAlC,CAHF;;AAAA;AAGbC,YAAAA,MAHa;;AAAA,gBAKdA,MAAM,CAACC,EALO;AAAA;AAAA;AAAA;;AAMjBC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,MAArB;AANiB,6CAOVI,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,2CAArB,CAPU;;AAAA;AAUnBV,YAAAA,SAAS;AAETV,YAAAA,aAAa,CAACqB,6BAAd,CAA4C;AAC1CC,cAAAA,KAAK,EAAE,UADmC;AAE1CC,cAAAA,IAAI,EAAE;AAFoC,aAA5C;;AAZmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAkBA,SACE,oBAAC,IAAD;AACE,IAAA,aAAa,EAAE;AAAEd,MAAAA,OAAO,EAAE;AAAX,KADjB;AAEE,IAAA,QAAQ,EAAED,YAFZ;AAGE,IAAA,gBAAgB,EAAEgB,gBAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAE,GADb;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,aAAa,EAAE,CAJjB;AAKE,IAAA,WAAW,EAAC,YALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAYE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAgBD;;AAED,IAAMA,gBAAgB,GAAGvB,GAAG,CAACwB,MAAJ,GAAaC,KAAb,CAAmB;AAC1CjB,EAAAA,OAAO,EAAER,GAAG,CAAC0B,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,SAArC;AADiC,CAAnB,CAAzB;AAIA,eAAexB,iBAAf","sourcesContent":["import React from \"react\";\nimport { Alert, Keyboard } from \"react-native\";\nimport { Notifications } from \"expo\";\nimport * as Yup from \"yup\";\n\nimport { Form, FormField, SubmitButton } from \"./forms\";\nimport messagesApi from \"../api/messages\";\n\nfunction ContactSellerForm({ listing }) {\n  const handleSubmit = async ({ message }, { resetForm }) => {\n    Keyboard.dismiss();\n\n    const result = await messagesApi.send(message, listing.id);\n\n    if (!result.ok) {\n      console.log(\"Error\", result);\n      return Alert.alert(\"Error\", \"Could not send the message to the seller.\");\n    }\n\n    resetForm();\n\n    Notifications.presentLocalNotificationAsync({\n      title: \"Awesome!\",\n      body: \"Your message was sent to the seller.\",\n    });\n  };\n\n  return (\n    <Form\n      initialValues={{ message: \"\" }}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema}\n    >\n      <FormField\n        maxLength={255}\n        multiline\n        name=\"message\"\n        numberOfLines={3}\n        placeholder=\"Message...\"\n      />\n      <SubmitButton title=\"Contact Seller\" />\n    </Form>\n  );\n}\n\nconst validationSchema = Yup.object().shape({\n  message: Yup.string().required().min(1).label(\"Message\"),\n});\n\nexport default ContactSellerForm;\n"]},"metadata":{},"sourceType":"module"}